==Diary

This is a ongoing diary of my code development process on the project

===Friday Evening, 7:20 pm.
---
Started code.  Created the initial rails scaffolding (sans data model) to get some place to put docs, as well as created a git repo.  I'll post this to github later.

Some initial thoughts:

1.  Technology:  Rails for the app (due to its powerful scaffolding), SQLite for a backend (Postgres if there's time in the end...lets get something working, and save the 20 minutes to get PG set up).  AWS for hosting.

2.  Create an ERD -- there are images, items (of interest), and tags on those items.  Tags each live in a genus. The genera are constrained to a finite set, but extensible.

2.  Create a simple wireframe

3.  Instantiate the ERD.  At least get models, contstraints, and tests together.

4.  Go beyond rails's CRUD to instantiate the first view.  Forget about users, auth, ownership, etc for now (those will be important, but not for the first cut)

5.  Get app hosted, so that it can be shared.  Code goes into github, app goes on aws.  That may well imply postgres and passenger.

6. If there's time, start working on the javascript.  Save this for last, as it's my weakest part, and could be a huge time sink.

<em>20 min consumed</em>

===Friday Evening, 8:00 pm
---
Working on ERD.  The classes are:
Image -- the representation of the remotely-stored image.
ImageTag -- meta-information on the image.  Might include a category, e.g.  We don't know, so let's leave this open
Selection -- One or more cuts from the image.  A geometric selection of a particular image
SelectionTag -- Constrained tag of the selection.  We constrain this to avoid variations on a theme:  "green" = "Green" = "go" are all the same values for a stop light that is green.
Type -- the constrained (but extensible) set for selection_tags.  Note that these may well be in a hierarchy, but we'll fake that for now by adding a delimiter in the name field, so that "Status|Color" and "Status|Working" are related by convention.

<em>25 minutes consumed, 45 minutes total</em>

===Friday evening, 8:45 pm
---
Worked on wireframes.  I've gotten the idea that there can be multiple selections in each photo, and multiple tags for each selection.  I think there should be some hierarchy to the tags structure -- It feels clumsy that all the tags are on the same level.  With more time, I would divide the tags into some sort of hierarchy, to ease navigation.  It should be very fast to choose "stoplight" (or even have that preset), then identify the three things about a stoplight (working/not working, color, "has-left-turn-signal").  I'll implement what I have so far, and go back (if there's time)

<em>35 minutes consumed, 1 hr 20 minutes total</em>

===Saturday morning, 9:00 am
---
Added a missing wireframe (tag CRUD).  I don't like my scheme where I present the flat tag space.  I think it puts too much on the user.  Ah well, nothing for it.  I'll put that on the todo list.  The first item on the TODO list:  create a TODO list!
Time to start creating models!

Query:  do I use postgres native types for the selection model?  After thinking about it:  no.  There's very little geometry that I contemplate with the selection (I won't provide a mechanism for scaling, e.g.), so using the native type for point, polygon just adds complexity and expected translation problems when I go from client to server.

Note:  renamed SelectionTag to be Tag, so that the join table could be selection_tag, not selection_selection_tag

Generated the models, but there's a bit of fixup.  They need to be hand-tweeked, db:migrate, db:seed, and tests fixed.  After that, constraints.

<em>30 minutes consumed, 1 hr 50 minutes total</em>

===Saturday afternoon:  3:10 pm
---
Revised schedule:
2 hours set up -- design  / layout (done)
*2 hours model + controller -- create / constrain / seed / test
2 hours layout -- views, a wee bit of javascript
2 hours deploy -- aws, github, etc

Minor model update.  I forgot to include ImageTag in the original model generation, which was serendipitous, as I think we can get away with a one-to-many (simpler).

Code tests pass!  I need to add a few more tests, then start on seed data
<em>50 minutes consumed, 2 hr 40 minutes total</em>

===Saturday Afternoon: 5:00 pm
---
Arg!  selection belongs_to an image.  Got to add that.  Arg2!  Tag belongs_to a selection.  Was I on crack this morning?
Fixed both, tests pass.

Seed data added.  Time to fire up the crud interface!  And it works!!

<em>30 minutes consumed.  3 hours 10 minutes total</em>

===Saturday night, 8:50 pm.
---
Time to start layout.  Since I'm not using any kind of user model or individual configuration, time to code the first screen (display an image).

We first need an index page, so I'll add one.

Done.  Images show.  Now they need to be scaled.  

<em>35 minutes consumed, 3 hours 45 minutes total</em>

===Sunday afernoon, 1:45 pm
---
Fixed up the size using html.  Probably want to do this using CSS.  We'll want the entire layout in bootstrap BTW.  Add it at the top of the TODO
I'll move on to the main screen, and revisit the index page when that's done.  I want the app functional before I make it pretty.

a.  get image in place
b.  make a selection
c.  Add tags

.. time passes ..
I don't know how to draw the annotation.  Don't want this to slow me down.  I'll add it to the backlog, and fake it by drawing a rectangle

<em>50 minutes consumed 4 hours 35 minutes total</em>

===Sunday Afternoon, 4:45 pm
---
Going to put a selection using a div, and fake its appearence with a passed parameter.  Time to get going on the rest of the layout!

Got the elements of the "selection" section in place.  These need to be laid out with css

<em>50 minutes consumed, 5 hours 25 minutes total</em>

===Sunday Evening, 8 pm
---
The CSS debt gets bigger.  I'll want to move the sections created into partials for ease of editing and organization.
Ok, I'm running out of time.  I'll use some much dirtier methods with nested routes to avoid some of the multiple-form stuff

<em>50 minutes consumed, 6 hours 15 minutes total</em>

Out of time.  I need to simplify this by using the forms from Rails, which give me crud actions for everything.
We'll get this online, then do some minor cleanup.

<em>1 hr consumed, 7 hrs 15 minutes total</em>

===Monday morning, 9 am.
---
Getting code in github and on AWS.  Then, I'll take the remaining time to link together the various sections
For AWS, it'll be dead-simple.  An external load-balancer pointed into a single backing instance running passenger.

To get the machine ready, I need to install rvm, rails, and nginx
I also need to configure the app for passenger

Machine is set up, rails installed, nginx installed, and the app is working and serving in developer mode.  Still need to tweek security zones and make sure passenger is behaving.

<em>50 minutes consumed, 8 hours 5 minutes total</em>

===Monday morning, 10:00 am
---
The code is now running on AWS via passenger.  Major accomplishment.  Last step is to add a default page, then write up what I've done, what I'd do, and see how it's viewed

<em>70 minutes consumed, 9 hours 10 minutes total</em>

==Monday morning, 11 am
---
Created a pages controller for the index page.  Only a geek will love it.
done.  I'm out of time!!!!!

<em>40 minutes consumed, 10 hours total</em>

---
